#!/bin/sh
#

#
# Copyright (c) 2024 Rodrigo Vigna
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

set -e

# Source necessary functions
. /lib/cryptsetup/functions

CS_DIR=/lib/cryptsetup/scripts

# Defaults
PIM=1
LENGTH=32
MIN_LENGTH=32
MAX_LENGTH=256
SLEEPTIME=2

# Functions
print() {
    if command -v plymouth >/dev/null 2>&1 && plymouth --ping; then
        plymouth message --text="$*"
    else
        printf "$*\n" 1>&2
    fi
}

askpass_plymouth() {
    if command -v plymouth >/dev/null 2>&1 && plymouth --ping; then
        plymouth ask-for-password --prompt="$1"
    else
        /usr/lib/cryptsetup/askpass "$1"
    fi
}

isint() {
    case "$1" in
        *[!0-9]*) return 1 ;;
        *) return 0 ;;
    esac
}

# Main loop
main() {
    # Notify via Plymouth
    print "pimhasher: unlocking $CRYPTTAB_NAME"
    sleep 2

    # Read password
    P=$(askpass_plymouth "Enter passphrase: ")

    # Read Personal Iterations Multiplier
    while true; do
        T=$(askpass_plymouth "Enter PIM (1): ")

        if [ -z "$T" ]; then
            PIM=1
            break
        elif isint "$T" && [ "$T" -lt 0 ]; then
            print "PIM must be an integer."
            sleep $SLEEPTIME
        elif isint "$T" && [ "$T" -eq 0 ]; then
	    PIM="$T"
	    break
        elif isint "$T" && [ "$T" -gt 0 ]; then
            PIM="$T"
            break
        else
            print "Must be an integer."
            sleep $SLEEPTIME
        fi
    done

    # Read BLAKE3 length
    while [ $PIM -ne 0 ]; do
        T=$(askpass_plymouth "Enter BLAKE3 digest size ($LENGTH): ")

        if [ -z "$T" ]; then
            LENGTH=64
            break
        elif isint "$T" && [ "$T" -lt "$MIN_LENGTH" ]; then
            print "BLAKE3 minimum digest size is $MIN_LENGTH."
            sleep $SLEEPTIME
        elif isint "$T" && [ "$T" -le "$MAX_LENGTH" ]; then
            LENGTH="$T"
            break
        elif isint "$T" && [ "$T" -gt "$MAX_LENGTH" ]; then
            print "BLAKE3 maximum digest size is $MAX_LENGTH."
            sleep $SLEEPTIME
        else
            print "Must be an integer."
            sleep $SLEEPTIME
        fi
    done


    # Loop PIM
    if [ $PIM -gt 0 ]; then
    	P=$(printf "$P" | pimhasher-blake3 -r $PIM -s $LENGTH)
    fi
    
    # Send passphrase
    printf "$P"

    # Exit
    exit
}

main
